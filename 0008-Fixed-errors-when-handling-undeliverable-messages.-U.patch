From bc627dff69d273a850d9c3c36d81492ecc9811e4 Mon Sep 17 00:00:00 2001
From: Kenneth Giusti <kgiusti@gmail.com>
Date: Fri, 29 Jan 2016 16:15:47 -0500
Subject: [PATCH 8/8] Fixed errors when handling undeliverable messages. 
 Updated README.md


diff --git a/plugins/omamqp1/README.md b/plugins/omamqp1/README.md
index 848c8a4..cd9bf6a 100644
--- a/plugins/omamqp1/README.md
+++ b/plugins/omamqp1/README.md
@@ -3,7 +3,7 @@
 The omamqp1 output module can be used to send log messages via an AMQP
 1.0-compatible messaging bus.
 
-This plugin requires the Apache QPID Proton python library, version
+This module requires the Apache QPID Proton python library, version
 0.10+.  This should be installed on the system that is running
 rsyslogd.
 
@@ -32,7 +32,7 @@ Example:
            host="localhost:5672"
            target="amq.topic")
 
-The following parameters are recognized by the plugin:
+The following parameters are recognized by the module:
 
 * host - The address of the message bus.  Optionally a port can be
   included, separated by a ':'.  Example: "localhost:5672"
@@ -41,12 +41,226 @@ The following parameters are recognized by the plugin:
   necessary to create this target manually.  Example: "amq.topic"
 * username - Optional.  Used by SASL to authenticate with the message bus.
 * password - Optional.  Used by SASL to authenticate with the message bus.
-* template - Template used by the action.
+* template - Logging template used by the action.
 * idleTimeout - The idle timeout in seconds.  This enables connection
   heartbeats and is used to detect a failed connection to the message
   bus.  Set to zero to disable.
-* retryDelay - The time in seconds this plugin will delay before
+* maxResend - number of times an undeliverable message is re-sent to
+  the message bus before it is dropped. This is unrelated to rsyslog's
+  action.resumeRetryCount.  Once the connection to the message bus is
+  active this module is ready to receive log messages from rsyslog
+  (i.e. the module has 'resumed').  Even though the connection is
+  active, any particular message may be rejected by the message bus
+  (e.g. 'unrouteable').  The module will retry (e.g. 'suspend') for up
+  to maxResend attempts before discarding the message as
+  undeliverable.  Setting this to zero disables the limit and
+  unrouteable messages will be retried as long as the connection stays
+  up.  You probably do not want that to happen.  The default is 10.
+* reconnectDelay - The time in seconds this module will delay before
   attempting to re-established a failed connection (default 5
   seconds).
 * disableSASL - Setting this to a non-zero value will disable SASL
   negotiation.  Only necessary if the message bus does not offer SASL.
+
+## Dependencies ##
+
+The package is dependent on the QPID Proton AMQP 1.0 library.
+
+To build this package you must also have the QPID Proton C headers
+installed.  Check your distribution for the availability of Proton
+packages.  Alternatively, you can pull down the Proton code from the
+[project website](http://qpid.apache.org/) and build it yourself.
+
+## Debugging ##
+
+Debug logging can be enabled using the rsyslog debug configuration
+settings.  For example:
+
+    $DebugFile /tmp/omamqp1-debug.txt
+    $DebugLevel 2
+
+
+----
+
+## Notes on use with the QPID C++ broker (qpidd) ##
+
+_Note well: These notes assume use of version 0.34 of the QPID C++
+broker. Previous versions may not be fully compatible_
+
+To use the Apache QPID C++ broker _qpidd_ as the message bus, a
+version of qpidd that supports the AMQP 1.0 protocol must be used.
+
+Since qpidd can be packaged without AMQP 1.0 support you should verify
+AMQP 1.0 has been enabled by checking for AMQP 1.0 related options in
+the qpidd help text.  For example:
+
+    qpidd --help
+
+    ...
+
+    AMQP 1.0 Options:
+      --domain DOMAIN           Domain of this broker
+      --queue-patterns PATTERN  Pattern for on-demand queues
+      --topic-patterns PATTERN  Pattern for on-demand topics
+   
+If no AMQP 1.0 related options appear in the help output, then AMQP
+1.0 has not been included with your qpidd.
+
+The destination for message (target) must be created before log
+messages arrive.  This can be done using the qpid-config tool.
+
+Example:
+
+    qpid-config add queue rsyslogd
+
+Alternatively, the target can be created on demand by configuring a
+queue-pattern (or topic-pattern) that matches the target.  To do this,
+add a _queue-patterns_ (or _topic_patterns_) directive to the qpidd
+configuration file /etc/qpid/qpidd.conf.
+
+For example, to have qpidd automatically create a queue named
+_rsyslogd_, add the following to the qpidd configuration file:
+
+    queue-patterns=rsyslogd
+
+or, if a topic is desired instead of a queue:
+
+    topic-patterns=rsyslogd
+
+These dynamic targets are auto-delete and will be destroyed once there
+are no longer any subscribers or queue-bound messages.
+
+Versions of qpidd <= 0.34 also need to have the SASL service name set
+to 'amqp'. Add this to the qpidd.conf file:
+
+    sasl-service-name=amqp
+
+----
+
+## Notes on use with the QPID Dispatch Router (qdrouterd) ##
+
+_Note well: These notes assume use of version 0.5 of the QPID Dispatch
+Router Previous versions may not be fully compatible_
+
+
+The default qdrouterd configuration does not have SASL authentication
+turned on.  You must set up SASL in the qdrouter configuration file
+/etc/qpid-dispatch/qdrouterd.conf
+
+First create a SASL configuration file for qdrouterd.  This
+configuration file is usually /etc/sasl2/qdrouterd.conf, but its
+default location may vary depending on your platform's configuration.
+
+This document assumes you understand how to properly configure SASL.
+
+Here is an example qdrouterd SASL configuration file that allows the
+client to use the DIGEST-MD5 or PLAIN authentication mechanisims, plus
+a SASL user database:
+
+    pwcheck_method: auxprop
+    auxprop_plugin: sasldb
+    sasldb_path: /var/lib/qdrouterd/qdrouterd.sasldb
+    mech_list: DIGEST-MD5 PLAIN
+
+Once a SASL configuration file has been set up for qdrouterd the path
+to the directory holding the configuration file and the basename of
+the configuration file (sas '.conf') must be added to the
+/etc/qpid-dispatch/qdrouterd.conf configuration file.  This is done by
+adding _saslConfigPath_ and _saslConfigName_ to the _container_
+section of the configuration file. For example, assuming the file
+/etc/sasl2/qdrouter.conf holds the qdrouterd SASL configuration:
+
+    container {
+        workerThreads: 4
+        containerName: Qpid.Dispatch.Router.A
+        saslConfigPath: /etc/sasl2
+        saslConfigName: qdrouterd
+    }
+
+In addition, the address used by the omamqp1 module to connect to
+qdrouterd must have SASL authentication turned on.  This is done by
+adding the _authenticatePeer_ attribute set to 'yes' to the
+corresponding _listener_ entry:
+
+    listener {
+        addr: 0.0.0.0
+        port: amqp
+        authenticatePeer: yes 
+    }
+
+This should complete the SASL setup needed by qdrouterd.
+
+The target address used as the destination for the log messages must
+be picked with care.  qdrouterd uses the prefix of the target address
+to determine the forwarding pattern used for messages sent using that
+target address.  Addresses starting with the prefix _queue_ are
+distributed to only one message receiver.  If there are multiple
+message consumers listening to that target address, only one listener
+will receive the message.  In this case, qdrouterd will load balance
+messages across the multiple consumers - much like a queue with
+competing subscribers. For example: "queue/rsyslogd"
+
+If a multicast pattern is desired - where all active listeners receive
+their own copy of the message - the target address prefix _multicast_
+may be used.  For example: "multicast/rsyslogd"
+
+Note well: if there are _no_ active receivers for the log messages,
+messages will be rejected the qdrouterd.  In this case the omamqp1
+module will return a _SUSPENDED_ result to the rsyslogd main task.
+rsyslogd may then re-submit the rejected log messages to the module,
+which will attempt to send them again.  This retry option is
+configured via rsyslogd - it is not part of this module.  Refer to the
+rsyslogd actions documentation.
+
+----
+
+### Using qdrouterd in combination with qpidd ###
+
+A qdrouterd-based message bus can use a broker as a message storage
+mechanism for those that require broker-based message services (such
+as a message store).  This section explains how to configure qdrouterd
+and qpidd for this type of deployment.  Please read the notes for
+deploying qpidd and qdrouterd first.
+
+Each qdrouterd instance that is to connect the broker to the message
+bus must define a _connector_ section in the qdrouterd.conf file.
+This connector contains the addressing information necessary to have
+the message bus set up a connection to the broker.  For example, if a
+broker is available on host broker.host.com at port 5672:
+
+    connector {
+        name: mybroker
+        role: on-demand
+        addr: broker.host.com
+        port: 5672
+    }
+
+In order to route messages to and from the broker, a static _link
+route_ must be configured on qdrouterd.  This link route contains a
+target address prefix and the name of the connector to use for
+forwarding matching messages.
+
+For example, to have qdrouterd forward messages that have a target
+address prefixed by 'Broker' to the connector defined above, the
+following link pattern must be added to the qdrouterd.conf
+configuration:
+
+    linkRoutePattern {
+        prefix: /Broker/
+        connector: mybroker
+    }
+
+A queue must then be created on the broker.  The name of the queue
+must be prefixed by the same prefix specified in the linkRoutePattern
+entry.  For example:
+
+    $ qpid-config add queue Broker/rsyslogd
+
+Lastly, use the name of the queue for the target address used by the
+omamqp module.  For example, assuming qdrouterd is listening on local
+port 5672:
+
+    action(type="omamqp1"
+           host="localhost:5672"
+           target="Broker/rsyslogd")
+
diff --git a/plugins/omamqp1/omamqp1.c b/plugins/omamqp1/omamqp1.c
index 6aa6b55..210a346 100644
--- a/plugins/omamqp1/omamqp1.c
+++ b/plugins/omamqp1/omamqp1.c
@@ -75,7 +75,8 @@ typedef struct _configSettings {
     uchar *templateName;
     int bDisableSASL;   /* do not enable SASL? 0-enable 1-disable */
     int idleTimeout;    /* disconnect idle connection (seconds) */
-    int retryDelay;     /* pause before re-connecting (seconds) */
+    int reconnectDelay; /* pause before re-connecting (seconds) */
+    int maxRetries;   /* drop unrouteable messages after maxRetries attempts */
 } configSettings_t;
 
 
@@ -148,7 +149,8 @@ static struct cnfparamdescr actpdescr[] = {
     { "password", eCmdHdlrGetWord, 0 },
     { "template", eCmdHdlrGetWord, 0 },
     { "idleTimeout", eCmdHdlrNonNegInt, 0 },
-    { "retryDelay", eCmdHdlrPositiveInt, 0 },
+    { "reconnectDelay", eCmdHdlrPositiveInt, 0 },
+    { "maxRetries", eCmdHdlrNonNegInt, 0 },
     { "disableSASL", eCmdHdlrInt, 0 }
 };
 static struct cnfparamblk actpblk = {
@@ -193,18 +195,18 @@ ENDfreeInstance
 BEGINdbgPrintInstInfo
 CODESTARTdbgPrintInstInfo
 {
-#if 0
-
-    /* TODO: dump the instance data */
-    dbgprintf("omamqp1\n");
-    dbgprintf("  host=%s\n", pn_url_str(pData->url));
-    dbgprintf("  username=%s\n", pData->username);
-    //dbgprintf("  password=%s", pData->password);
-    dbgprintf("  target=%s\n", pData->target);
-    dbgprintf("  template=%s\n", pData->templateName);
-    dbgprintf("  disableSASL=%d\n", pData->bDisableSASL);
-    dbgprintf("  running=%d\n", pData->bIsRunning);
-#endif
+    configSettings_t *cfg = &pData->config;
+    dbgprintf("omamqp1:\n");
+    dbgprintf("  host=%s\n", pn_url_str(cfg->url));
+    dbgprintf("  username=%s\n", cfg->username);
+    //dbgprintf("  password=%s\n", pData->password);
+    dbgprintf("  target=%s\n", cfg->target);
+    dbgprintf("  template=%s\n", cfg->templateName);
+    dbgprintf("  disableSASL=%d\n", cfg->bDisableSASL);
+    dbgprintf("  idleTimeout=%d\n", cfg->idleTimeout);
+    dbgprintf("  reconnectDelay=%d\n", cfg->reconnectDelay);
+    dbgprintf("  maxRetries=%d\n", cfg->maxRetries);
+    dbgprintf("  running=%d\n", pData->bThreadRunning);
 }
 ENDdbgPrintInstInfo
 
@@ -221,6 +223,7 @@ ENDtryResume
 BEGINbeginTransaction
 CODESTARTbeginTransaction
 {
+    DBGPRINTF("omamqp1: beginTransaction\n");
     pData->log_count = 0;
     if (pData->message) pn_decref(pData->message);
     pData->message = pn_message();
@@ -236,21 +239,24 @@ ENDbeginTransaction
 BEGINdoAction
 CODESTARTdoAction
 {
+    DBGPRINTF("omamqp1: doAction\n");
+    if (!pData->message) ABORT_FINALIZE(RS_RET_OK);
     pn_bytes_t msg = pn_bytes(strlen((const char *)ppString[0]),
                               (const char *)ppString[0]);
-    assert(pData->message);
     pn_data_t *body = pn_message_body(pData->message);
     pn_data_put_string(body, msg);
     pData->log_count++;
     iRet = RS_RET_DEFER_COMMIT;
 }
+finalize_it:
 ENDdoAction
 
 
 BEGINendTransaction
 CODESTARTendTransaction
 {
-    assert(pData->message);
+    DBGPRINTF("omamqp1: endTransaction\n");
+    if (!pData->message) ABORT_FINALIZE(RS_RET_OK);
     pn_data_t *body = pn_message_body(pData->message);
     pn_data_exit(body);
     pn_message_t *message = pData->message;
@@ -288,7 +294,7 @@ CODESTARTnewActInst
             char *u = es_str2cstr(pvals[i].val.d.estr, NULL);
             cs->url = pn_url_parse(u);
             if (!cs->url) {
-                errmsg.LogError(0, RS_RET_CONF_PARSE_ERROR, "omamqp1: Invalid host URL configured: '%s'\n", u);
+                errmsg.LogError(0, RS_RET_CONF_PARSE_ERROR, "omamqp1: Invalid host URL configured: '%s'", u);
                 free(u);
                 ABORT_FINALIZE(RS_RET_CONF_PARSE_ERROR);
             }
@@ -301,14 +307,15 @@ CODESTARTnewActInst
             cs->username = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
         } else if (!strcmp(actpblk.descr[i].name, "password")) {
             cs->password = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
-        } else if (!strcmp(actpblk.descr[i].name, "retryDelay")) {
-            cs->retryDelay = (int) pvals[i].val.d.n;
+        } else if (!strcmp(actpblk.descr[i].name, "reconnectDelay")) {
+            cs->reconnectDelay = (int) pvals[i].val.d.n;
         } else if (!strcmp(actpblk.descr[i].name, "idleTimeout")) {
             cs->idleTimeout = (int) pvals[i].val.d.n;
+        } else if (!strcmp(actpblk.descr[i].name, "maxRetries")) {
+            cs->maxRetries = (int) pvals[i].val.d.n;
         } else if (!strcmp(actpblk.descr[i].name, "disableSASL")) {
             cs->bDisableSASL = (int) pvals[i].val.d.n;
         } else {
-            // TODO retrydelay, idle timeout
             dbgprintf("omamqp1: program error, unrecognized param '%s', ignored.\n",
                       actpblk.descr[i].name);
         }
@@ -397,6 +404,7 @@ typedef struct {
     uint64_t tag;
     int msgs_sent;
     int msgs_settled;
+    int retries;
     sbool stopped;
 } protocolState_t;
 
@@ -407,7 +415,8 @@ typedef struct {
 static void _init_config_settings(configSettings_t *pConfig)
 {
     memset(pConfig, 0, sizeof(configSettings_t));
-    pConfig->retryDelay = 5;
+    pConfig->reconnectDelay = 5;
+    pConfig->maxRetries = 10;
 }
 
 
@@ -507,8 +516,7 @@ static void _abort_command(protocolState_t *ps)
     pthread_mutex_lock(&ipc->lock);
     switch (ipc->command) {
     case COMMAND_SEND:
-      errmsg.LogError(0, NO_ERRCODE,
-                      "omamqp1: aborted the message send in progress");
+      dbgprintf("omamqp1: aborted the message send in progress\n");
       // fallthrough:
     case COMMAND_IS_READY:
       ipc->result = RS_RET_SUSPENDED;
@@ -528,11 +536,10 @@ static void _log_error(const char *message, pn_condition_t *cond)
 {
     const char *name = pn_condition_get_name(cond);
     const char *desc = pn_condition_get_description(cond);
-    errmsg.LogError(0, NO_ERRCODE,
-                    "omamqp1: %s %s:%s\n",
-                    message,
-                    (name) ? name : "<no name>",
-                    (desc) ? desc : "<no description>");
+    dbgprintf("omamqp1: %s %s:%s\n",
+              message,
+              (name) ? name : "<no name>",
+              (desc) ? desc : "<no description>");
 }
 
 
@@ -578,22 +585,20 @@ static void dispatcher(pn_handler_t *handler, pn_event_t *event, pn_event_type_t
                     result = RS_RET_OK;
                     break;
                 case PN_REJECTED:
-                    errmsg.LogError(0, NO_ERRCODE,
-                                    "omamqp1: peer rejected log message, dropping");
-                    result = RS_RET_ERR;
+                  dbgprintf("omamqp1: message bus rejected log message: invalid message - dropping\n");
+                    // message bus considers this a 'bad message'. Cannot be redelivered.
+                    // Likely a configuration error. Drop the message by returning OK
+                    result = RS_RET_OK;
                     break;
                 case PN_RELEASED:
-                    DBGPRINTF("omamqp1: peer unable to accept message, suspending");
-                    result = RS_RET_SUSPENDED;
-                    break;
                 case PN_MODIFIED:
-                    if (pn_disposition_is_undeliverable(pn_delivery_remote(ps->delivery))) {
-                        errmsg.LogError(0, NO_ERRCODE,
-                                        "omamqp1: log message undeliverable, dropping");
-                        result = RS_RET_ERR;
+                  // the message bus cannot accept the message.  This may be temporary - retry up to maxRetries before dropping
+                    if (++ps->retries >= cfg->maxRetries) {
+                      dbgprintf("omamqp1: message bus failed to accept message - dropping\n");
+                      result = RS_RET_OK;
                     } else {
-                        DBGPRINTF("omamqp1: message modified, suspending");
-                        result = RS_RET_SUSPENDED;
+                      dbgprintf("omamqp1: message bus cannot accept message, retrying\n");
+                      result = RS_RET_SUSPENDED;
                     }
                     break;
                 case PN_RECEIVED:
@@ -601,9 +606,9 @@ static void dispatcher(pn_handler_t *handler, pn_event_t *event, pn_event_type_t
                     break;
                 default:
                     // no other terminal states defined, so ignore anything else
-                    errmsg.LogError(0, NO_ERRCODE,
-                                    "omamqp1: unknown delivery state=0x%lX, ignoring",
-                                    (unsigned long) pn_delivery_remote_state(ps->delivery));
+                    dbgprintf("omamqp1: unknown delivery state=0x%lX, assuming message accepted\n",
+                              (unsigned long) pn_delivery_remote_state(ps->delivery));
+                    result = RS_RET_OK;
                     break;
                 }
 
@@ -618,9 +623,8 @@ static void dispatcher(pn_handler_t *handler, pn_event_t *event, pn_event_type_t
                     pthread_mutex_unlock(&ipc->lock);
                     pn_delivery_settle(ps->delivery);
                     ps->delivery = NULL;
-                    if (result == RS_RET_ERR) {
-                        // try reconnecting to clear the error
-                      _close_connection(ps);
+                    if (result == RS_RET_OK) {
+                      ps->retries = 0;
                     }
                 }
             }
@@ -654,7 +658,7 @@ static void dispatcher(pn_handler_t *handler, pn_event_t *event, pn_event_type_t
         break;
 
     case PN_CONNECTION_UNBOUND:
-        DBGPRINTF("omamqp1: cleaning up connection resources");
+        DBGPRINTF("omamqp1: cleaning up connection resources\n");
         pn_connection_release(pn_event_connection(event));
         ps->conn = NULL;
         ps->sender = NULL;
@@ -670,8 +674,7 @@ static void dispatcher(pn_handler_t *handler, pn_event_t *event, pn_event_type_t
             if (pn_condition_is_set(cond)) {
                 _log_error("transport failure", cond);
             }
-            errmsg.LogError(0, NO_ERRCODE,
-                            "omamqp1: network transport failed, reconnecting...");
+            dbgprintf("omamqp1: network transport failed, reconnecting...\n");
             // the protocol thread will attempt to reconnect if it is not
             // being shut down
         }
@@ -816,8 +819,8 @@ static void *amqp1_thread(void *arg)
             pn_connection_set_user(ps->conn, user);
 
         const char *pword = cfg->password
-            ? (char *) config->password
-            : pn_url_get_password(url);
+            ? (char *) cfg->password
+            : pn_url_get_password(cfg->url);
         if (pword)
             pn_connection_set_password(ps->conn, pword);
 #endif
@@ -842,8 +845,8 @@ static void *amqp1_thread(void *arg)
 
         _abort_command(ps);   // unblock main thread if necessary
 
-        // delay retryDelay seconds before re-connecting:
-        int delay = ps->config->retryDelay;
+        // delay reconnectDelay seconds before re-connecting:
+        int delay = ps->config->reconnectDelay;
         while (delay-- > 0 && !ps->stopped) {
             srSleep(1, 0);
             _poll_command(ps);
@@ -876,7 +879,7 @@ static rsRetVal _launch_protocol_thread(instanceData *pData)
             return RS_RET_OK;
         }
     } while (rc == EAGAIN);
-    errmsg.LogError(0, RS_RET_SYS_ERR, "omamqp1: thread create failed: %d\n", rc);
+    errmsg.LogError(0, RS_RET_SYS_ERR, "omamqp1: thread create failed: %d", rc);
     return RS_RET_SYS_ERR;
 }
 
-- 
2.4.3

